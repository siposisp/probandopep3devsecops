version: '3.8'

networks:
  pep3-network:
    driver: bridge

services:
  # PostgreSQL Database
  postgres-db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: LabTBD-2-2024
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    networks:
      - pep3-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend-pep3:
    container_name: pep3_backend
    image: derflinger/pep3devsecops_backend
    ports:
      - "8097:8097"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/LabTBD-2-2024
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW-DETAILS=always
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - pep3-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8097/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue.js Frontend
  front-pep3:
    image: derflinger/pep3devsecops_frontend
    container_name: pep3_frontend
    ports:
      - "3000:80"
    restart: always
    networks:
      - pep3-network
    depends_on:
      - backend-pep3

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pep3_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pep3-network
    depends_on:
      - backend-pep3
      - front-pep3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: pep3_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - pep3-network
    depends_on:
      - prometheus

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: pep3_node_exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - pep3-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: 